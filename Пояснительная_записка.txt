ПОЯСНИТЕЛЬНАЯ ЗАПИСКА

к курсовой работе по дисциплине "Мобильная разработка"

на тему: "Разработка мобильного приложения кофейни"

Выполнил: студент группы ИКБО-26-22
Кирилл

Руководитель: [ФИО руководителя]

[Город, год]

СОДЕРЖАНИЕ

ВВЕДЕНИЕ	3
1. АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ МОБИЛЬНОГО ПРИЛОЖЕНИЯ	4
2. ОБЗОР СУЩЕСТВУЮЩИХ АНАЛОГОВ РАЗРАБАТЫВАЕМОГО ПРИЛОЖЕНИЯ	7
3. ТЕХНИЧЕСКОЕ ЗАДАНИЕ НА РАЗРАБОТКУ ПРОГРАММЫ	9
4. АРХИТЕКТУРА ПРОГРАММНОЙ СИСТЕМЫ	12
5. ПРОЕКТИРОВАНИЕ ИНТЕРФЕЙСА МОБИЛЬНОГО ПРИЛОЖЕНИЯ	15
6. КОНТРОЛЬНЫЙ ПРИМЕР РАБОТЫ ПРОГРАММЫ	18
7. ИНСТРУКЦИЯ ПОЛЬЗОВАТЕЛЯ	20
ЗАКЛЮЧЕНИЕ	22
СПИСОК ИСПОЛЬЗУЕМЫХ ИСТОЧНИКОВ	23
ПРИЛОЖЕНИЯ	24

ВВЕДЕНИЕ

В современном мире мобильные приложения стали неотъемлемой частью повседневной жизни. Особенно актуальными являются приложения для сферы общественного питания, которые позволяют клиентам удобно знакомиться с меню, делать заказы и получать информацию о заведении.

Тема курсовой работы: "Разработка мобильного приложения кофейни".

Цель курсовой работы: разработать мобильное приложение – систему управления заказами кофейни средствами языка Java для автоматизации процесса ознакомления клиентов с меню, управления корзиной заказов и предоставления информации о заведении.

Для достижения поставленной цели необходимо в заданной последовательности решить определённый перечень задач. Выполнение всех задач гарантированно приведёт к достижению поставленной цели.

Задачи курсовой работы:
1) проанализировать предметную область мобильного приложения;
2) сделать обзор существующих аналогов разрабатываемого приложения;
3) сформировать техническое задание на разработку программы в соответствии с ГОСТ 19.201-78;
4) описать архитектуру программной системы, привести структурную и функциональную диаграммы, схему базы данных;
5) спроектировать интерфейс мобильного приложения;
6) реализовать код программы на языке высокого уровня Java, протестировать его и отладить;
7) реализовать контрольный пример работы программы, начиная с открытия, показать все этапы работы вашего приложения.

Структура пояснительной записки: введение, 7 пунктов, заключение, список из 8 используемых источников, 3 приложения.

1. АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ МОБИЛЬНОГО ПРИЛОЖЕНИЯ

Предметная область разрабатываемого мобильного приложения охватывает сферу общественного питания, а именно деятельность кофейни. Кофейня представляет собой заведение общественного питания, специализирующееся на продаже кофейных напитков, десертов и легких закусок.

Основными участниками бизнес-процессов в данной предметной области являются:
- Клиенты кофейни (пользователи приложения);
- Администраторы заведения;
- Бариста и обслуживающий персонал.

Информационная модель данных предметной области представлена следующими основными сущностями:

[МЕСТО ДЛЯ РИСУНКА: ER-диаграмма предметной области]

Основные сущности:
- Пользователь (User) - содержит информацию о клиентах и администраторах;
- Товар (CoffeeItem) - представляет позиции меню кофейни;
- Корзина (Cart) - временное хранилище выбранных товаров;
- Заказ (Order) - финальная информация о покупке.

Атрибуты сущности "Пользователь":
- id (уникальный идентификатор);
- username (имя пользователя);
- password (пароль для авторизации);
- role (роль: "admin" или "user");
- email (электронная почта).

Атрибуты сущности "Товар":
- id (уникальный идентификатор);
- name (название товара);
- description (описание);
- price (цена);
- imagePath (путь к изображению);
- category (категория: "hot", "dessert");
- isAvailable (доступность товара).

Бизнес-процессы в кофейне, в которых задействована разрабатываемая программа:

[МЕСТО ДЛЯ РИСУНКА: Диаграмма бизнес-процессов IDEF0]

Основные бизнес-процессы:
1. Авторизация пользователя в системе;
2. Просмотр меню кофейни;
3. Добавление товаров в корзину;
4. Управление содержимым корзины;
5. Оформление заказа;
6. Получение информации о заведении.

Вывод о необходимости разработки приложения: В условиях цифровизации сферы общественного питания мобильные приложения для кофейни становятся необходимым инструментом для повышения качества обслуживания клиентов, ускорения процесса заказа и предоставления удобного доступа к информации о меню и заведении.

2. ОБЗОР СУЩЕСТВУЮЩИХ АНАЛОГОВ РАЗРАБАТЫВАЕМОГО ПРИЛОЖЕНИЯ

В настоящее время на рынке мобильных приложений представлено множество решений для сферы общественного питания. Рассмотрим основные аналоги разрабатываемого приложения:

1. Starbucks Mobile App
Достоинства:
- Интеграция с программой лояльности;
- Возможность предварительного заказа;
- Удобная система оплаты;
- Персонализированные рекомендации.

Недостатки:
- Сложный интерфейс для новых пользователей;
- Высокие требования к ресурсам устройства;
- Ограниченная функциональность для небольших заведений.

2. McDonald's App
Достоинства:
- Быстрая навигация по меню;
- Система скидок и акций;
- Простой процесс заказа;
- Мультиязычная поддержка.

Недостатки:
- Отсутствие детального описания товаров;
- Ограниченные возможности персонализации;
- Слабая интеграция с социальными сетями.

3. Яндекс.Еда
Достоинства:
- Широкий выбор заведений;
- Удобная система фильтрации;
- Интеграция с картами;
- Система отзывов.

Недостатки:
- Сложность для небольших заведений;
- Высокие комиссии;
- Зависимость от внешних сервисов.

4. Приложения локальных кофейных сетей
Достоинства:
- Специализация на кофейной продукции;
- Детальная информация о напитках;
- Возможность кастомизации заказов.

Недостатки:
- Ограниченный функционал;
- Устаревший дизайн интерфейса;
- Отсутствие системы лояльности.

Анализ отзывов пользователей в Google Play Store и App Store показывает следующие основные проблемы существующих решений:
- Сложность навигации для новых пользователей;
- Медленная загрузка приложений;
- Отсутствие офлайн-режима;
- Неудобная система управления корзиной;
- Ограниченная информация о товарах.

Вывод: Существующие аналоги имеют существенные недостатки в области пользовательского опыта, особенно для небольших кофейных заведений. Разрабатываемое приложение призвано решить эти проблемы, предоставив простой, быстрый и функциональный инструмент для клиентов кофейни.

3. ТЕХНИЧЕСКОЕ ЗАДАНИЕ НА РАЗРАБОТКУ ПРОГРАММЫ

Техническое задание на разработку мобильного приложения "Кофейня" составлено в соответствии с ГОСТ 19.201-78.

3.1 Основания для разработки
Основанием для разработки является необходимость создания мобильного приложения для автоматизации процесса обслуживания клиентов кофейни и предоставления удобного доступа к информации о меню и заведении.

3.2 Назначение разработки
Мобильное приложение "Кофейня" предназначено для:
- Ознакомления клиентов с меню кофейни;
- Управления корзиной заказов;
- Получения информации о заведении;
- Авторизации пользователей в системе.

3.3 Требования к программе

3.3.1 Требования к функциональности
Программа должна обеспечивать выполнение следующих функций:
- Авторизация пользователей (администратор/клиент);
- Просмотр меню кофейни с категориями товаров;
- Добавление товаров в корзину;
- Управление содержимым корзины (изменение количества, удаление);
- Просмотр детальной информации о товарах;
- Оформление заказа;
- Получение информации о заведении и инструкций пользователя.

3.3.2 Требования к надежности
- Время восстановления после сбоя не более 30 секунд;
- Вероятность безотказной работы не менее 0,95;
- Сохранность данных при некорректном завершении работы.

3.3.3 Требования к интерфейсу
- Интерфейс должен соответствовать принципам Material Design;
- Поддержка русского языка;
- Адаптивность для различных размеров экранов;
- Интуитивно понятная навигация.

3.3.4 Требования к производительности
- Время запуска приложения не более 3 секунд;
- Время отклика на действия пользователя не более 1 секунды;
- Поддержка работы на устройствах с Android 7.0 и выше.

3.4 Этапы разработки и сроки реализации

[МЕСТО ДЛЯ ТАБЛИЦЫ: Этапы разработки]

Этап 1: Анализ требований и проектирование (1-2 недели)
- Анализ предметной области;
- Создание технического задания;
- Проектирование архитектуры системы.

Этап 2: Разработка пользовательского интерфейса (2-3 недели)
- Создание макетов интерфейса;
- Реализация экранов приложения;
- Настройка навигации.

Этап 3: Разработка бизнес-логики (3-4 недели)
- Реализация моделей данных;
- Создание базы данных;
- Разработка алгоритмов работы приложения.

Этап 4: Тестирование и отладка (1-2 недели)
- Модульное тестирование;
- Интеграционное тестирование;
- Исправление выявленных ошибок.

Этап 5: Документирование и сдача (1 неделя)
- Написание документации;
- Подготовка презентации;
- Сдача курсовой работы.

Общий срок разработки: 8-12 недель.

4. АРХИТЕКТУРА ПРОГРАММНОЙ СИСТЕМЫ

4.1 Общее описание архитектуры

Разрабатываемое мобильное приложение построено на основе архитектурного паттерна Model-View-ViewModel (MVVM) с использованием компонентов Android Architecture Components. Приложение использует локальную базу данных Room для хранения данных, систему файлового хранения для резервного копирования и Navigation Component для управления навигацией между экранами.

[МЕСТО ДЛЯ РИСУНКА: Общая архитектурная диаграмма системы]

Основные компоненты архитектуры:
- Presentation Layer (Слой представления);
- Business Logic Layer (Слой бизнес-логики);
- Data Layer (Слой данных).

4.2 Структурная схема программы

[МЕСТО ДЛЯ РИСУНКА: Структурная диаграмма классов]

Основные пакеты приложения:
- com.example.coffeeshop.activities - активности приложения;
- com.example.coffeeshop.fragments - фрагменты пользовательского интерфейса;
- com.example.coffeeshop.model - модели данных;
- com.example.coffeeshop.data - работа с базой данных;
- com.example.coffeeshop.repository - репозиторий для доступа к данным;
- com.example.coffeeshop.adapters - адаптеры для списков;
- com.example.coffeeshop.utils - вспомогательные утилиты (включая FileManager для работы с файлами).

4.3 Функциональная схема программы

[МЕСТО ДЛЯ РИСУНКА: Функциональная диаграмма приложения]

Основные функциональные модули:
1. Модуль авторизации (LoginActivity);
2. Модуль главного экрана (HomeFragment);
3. Модуль меню кофе (CoffeeMenuFragment);
4. Модуль корзины (CartFragment);
5. Модуль информации (AboutFragment, AuthorFragment, InstructionFragment);
6. Модуль управления данными (CoffeeShopRepository).

4.4 Схема базы данных

[МЕСТО ДЛЯ РИСУНКА: Схема базы данных]

База данных построена на основе Room Database и включает следующие таблицы:

Таблица "users":
- id (INTEGER PRIMARY KEY AUTOINCREMENT);
- username (TEXT NOT NULL);
- password (TEXT NOT NULL);
- role (TEXT NOT NULL);
- email (TEXT).

Таблица "coffee_items":
- id (INTEGER PRIMARY KEY AUTOINCREMENT);
- name (TEXT NOT NULL);
- description (TEXT);
- price (REAL NOT NULL);
- imagePath (TEXT);
- category (TEXT);
- isAvailable (INTEGER DEFAULT 1).

Связи между таблицами:
- Один пользователь может иметь множество заказов (1:N);
- Один товар может входить в множество заказов (N:M).

Дополнительно реализована система файлового хранения:
- FileManager обеспечивает резервное копирование данных в текстовые файлы;
- Данные пользователей сохраняются в файл "user_data.txt";
- Данные товаров сохраняются в файл "coffee_data.txt";
- Корзина пользователя также сохраняется в файловую систему для восстановления при перезапуске приложения.

5. ПРОЕКТИРОВАНИЕ ИНТЕРФЕЙСА МОБИЛЬНОГО ПРИЛОЖЕНИЯ

5.1 Вайрфрейм интерфейса

[МЕСТО ДЛЯ РИСУНКА: Вайрфрейм главного экрана]

[МЕСТО ДЛЯ РИСУНКА: Вайрфрейм экрана авторизации]

[МЕСТО ДЛЯ РИСУНКА: Вайрфрейм меню кофе]

[МЕСТО ДЛЯ РИСУНКА: Вайрфрейм корзины]

5.2 Мокап интерфейса

[МЕСТО ДЛЯ РИСУНКА: Мокап главного экрана]

[МЕСТО ДЛЯ РИСУНКА: Мокап экрана авторизации]

[МЕСТО ДЛЯ РИСУНКА: Мокап меню кофе]

[МЕСТО ДЛЯ РИСУНКА: Мокап корзины]

5.3 Пользовательский сценарий

Основной пользовательский сценарий работы с приложением:

1. Запуск приложения
   - Пользователь открывает приложение "Кофейня";
   - Отображается экран авторизации.

2. Авторизация
   - Пользователь вводит логин и пароль;
   - Система проверяет данные в базе;
   - При успешной авторизации происходит переход на главный экран.

3. Навигация по приложению
   - Главный экран содержит приветствие и кнопки быстрого доступа;
   - Нижняя навигация позволяет переходить между разделами;
   - Верхнее меню предоставляет доступ к дополнительной информации.

4. Просмотр меню
   - Пользователь переходит в раздел "Меню кофе";
   - Отображается список доступных товаров с изображениями и ценами;
   - Возможен переход к детальному описанию товара.

5. Работа с корзиной
   - Добавление товаров в корзину через кнопку "Добавить";
   - Просмотр содержимого корзины;
   - Изменение количества или удаление товаров;
   - Оформление заказа.

6. Получение информации
   - Доступ к информации о программе;
   - Просмотр инструкции пользователя;
   - Информация об авторе приложения.

5.4 Принципы дизайна интерфейса

При проектировании интерфейса использованы следующие принципы:
- Material Design для обеспечения современного внешнего вида;
- Консистентность в использовании цветов и шрифтов;
- Интуитивная навигация с понятными иконками;
- Адаптивность для различных размеров экранов;
- Доступность для пользователей с ограниченными возможностями.

6. КОНТРОЛЬНЫЙ ПРИМЕР РАБОТЫ ПРОГРАММЫ

Контрольный пример демонстрирует полный цикл работы приложения от запуска до завершения сессии пользователя.

6.1 Запуск приложения

[МЕСТО ДЛЯ СКРИНШОТА: Экран запуска приложения]

При запуске приложения отображается экран авторизации с полями для ввода логина и пароля.

6.2 Процесс авторизации

[МЕСТО ДЛЯ СКРИНШОТА: Экран авторизации с введенными данными]

Пользователь вводит учетные данные:
- Логин: user
- Пароль: user123

[МЕСТО ДЛЯ СКРИНШОТА: Успешная авторизация]

После успешной авторизации происходит переход на главный экран приложения.

6.3 Главный экран

[МЕСТО ДЛЯ СКРИНШОТА: Главный экран приложения]

Главный экран содержит:
- Приветственное сообщение;
- Кнопки быстрого доступа к меню и корзине;
- Нижнюю навигацию для перехода между разделами.

6.4 Просмотр меню кофе

[МЕСТО ДЛЯ СКРИНШОТА: Список товаров в меню]

В разделе "Меню кофе" отображается список доступных товаров с изображениями, названиями и ценами.

[МЕСТО ДЛЯ СКРИНШОТА: Детальная информация о товаре]

При нажатии на товар открывается экран с детальной информацией, включающей описание и возможность добавления в корзину.

6.5 Работа с корзиной

[МЕСТО ДЛЯ СКРИНШОТА: Добавление товара в корзину]

Пользователь добавляет товары в корзину, нажимая соответствующую кнопку.

[МЕСТО ДЛЯ СКРИНШОТА: Содержимое корзины]

В корзине отображаются выбранные товары с возможностью изменения количества или удаления.

[МЕСТО ДЛЯ СКРИНШОТА: Оформление заказа]

При нажатии "Оформить заказ" отображается итоговая сумма и подтверждение заказа.

6.6 Дополнительные функции

[МЕСТО ДЛЯ СКРИНШОТА: Информация о программе]

[МЕСТО ДЛЯ СКРИНШОТА: Инструкция пользователя]

[МЕСТО ДЛЯ СКРИНШОТА: Информация об авторе]

6.7 Завершение работы

[МЕСТО ДЛЯ СКРИНШОТА: Выход из приложения]

Пользователь может выйти из приложения через меню или кнопку "Назад".

7. ИНСТРУКЦИЯ ПОЛЬЗОВАТЕЛЯ

7.1 Системные требования

Для корректной работы приложения "Кофейня" необходимо:
- Операционная система Android 7.0 (API level 24) или выше;
- Свободное место на устройстве: не менее 50 МБ;
- Подключение к интернету для первоначальной загрузки данных.

7.2 Установка приложения

1. Скачайте APK-файл приложения на ваше устройство;
2. Разрешите установку из неизвестных источников в настройках безопасности;
3. Запустите APK-файл и следуйте инструкциям установщика;
4. После установки найдите иконку приложения "Кофейня" на рабочем столе.

7.3 Первый запуск и настройка

1. Откройте приложение, нажав на его иконку;
2. На экране авторизации введите:
   - Логин: user (для обычного пользователя) или admin (для администратора);
   - Пароль: user123 (для пользователя) или admin123 (для администратора);
3. Нажмите кнопку "Войти";
4. При успешной авторизации откроется главный экран приложения.

7.4 Основные функции приложения

7.4.1 Навигация
- Используйте нижнюю панель навигации для перехода между основными разделами;
- Кнопка "Назад" возвращает к предыдущему экрану;
- Верхнее меню предоставляет доступ к дополнительной информации.

7.4.2 Просмотр меню
1. Перейдите в раздел "Меню кофе";
2. Просматривайте доступные товары с изображениями и ценами;
3. Нажмите на товар для просмотра детальной информации;
4. Используйте кнопку "Добавить в корзину" для выбора товара.

7.4.3 Работа с корзиной
1. Откройте раздел "Корзина";
2. Просматривайте выбранные товары;
3. Изменяйте количество товаров с помощью кнопок "+" и "-";
4. Удаляйте товары кнопкой "Удалить";
5. Нажмите "Оформить заказ" для завершения покупки.

7.4.4 Получение информации
- Раздел "О программе" содержит информацию о версии и возможностях приложения;
- "Инструкция пользователя" предоставляет подробное руководство;
- "Об авторе" содержит информацию о разработчике.

7.5 Решение возможных проблем

7.5.1 Проблемы с авторизацией
- Убедитесь в правильности ввода логина и пароля;
- Проверьте подключение к интернету;
- Перезапустите приложение при необходимости.

7.5.2 Медленная работа приложения
- Закройте другие приложения для освобождения памяти;
- Перезагрузите устройство;
- Проверьте свободное место на устройстве.

7.5.3 Проблемы с отображением
- Проверьте настройки масштабирования экрана;
- Убедитесь в актуальности версии Android;
- Переустановите приложение при необходимости.

7.6 Контакты для поддержки

При возникновении технических проблем обращайтесь:
- Email: kirill.kipr@gmail.com
- Группа разработчика: ИКБО-26-22

ЗАКЛЮЧЕНИЕ

В ходе выполнения курсовой работы была достигнута поставленная цель - разработано мобильное приложение "Кофейня" средствами языка Java для автоматизации процесса обслуживания клиентов кофейни.

Все поставленные задачи были успешно решены:

1. Проанализирована предметная область мобильного приложения - сфера общественного питания, конкретно деятельность кофейни. Создана информационная модель данных и проанализированы бизнес-процессы с использованием диаграмм IDEF0.

2. Проведен обзор существующих аналогов разрабатываемого приложения. Выявлены недостатки популярных решений, что обосновало необходимость создания специализированного приложения для кофейни.

3. Сформировано техническое задание на разработку программы в соответствии с ГОСТ 19.201-78, включающее требования к функциональности, надежности, интерфейсу и производительности, а также этапы разработки с указанием сроков.

4. Описана архитектура программной системы на основе паттерна MVVM с использованием Android Architecture Components. Приведены структурная и функциональная диаграммы, а также схема базы данных на основе Room Database.

5. Спроектирован интерфейс мобильного приложения с использованием принципов Material Design. Созданы вайрфреймы и мокапы основных экранов, разработан пользовательский сценарий.

6. Реализован код программы на языке Java с использованием современных технологий Android разработки. Приложение протестировано и отлажено, все основные функции работают корректно.

7. Реализован контрольный пример работы программы, демонстрирующий все этапы работы приложения от запуска до завершения сессии пользователя.

Разработанное приложение обеспечивает:
- Удобный просмотр меню кофейни с детальной информацией о товарах (эспрессо, капучино, латте, десерты и др.);
- Интуитивно понятную систему управления корзиной заказов;
- Современный пользовательский интерфейс в стиле Material Design;
- Надежное хранение данных с использованием Room Database и файловой системы;
- Систему авторизации с ролевой моделью (администратор/пользователь);
- Быструю и стабильную работу на различных Android устройствах.

Поскольку все задачи курсовой работы решены, цель курсовой работы достигнута. Мобильное приложение "Кофейня" готово к использованию и может служить основой для дальнейшего развития функциональности.

СПИСОК ИСПОЛЬЗУЕМЫХ ИСТОЧНИКОВ

1. ГОСТ 19.201-78. Единая система программной документации. Техническое задание. Требования к содержанию и оформлению. - М.: Стандартинформ, 2010. - 8 с.

2. Android Developers. Material Design Guidelines [Электронный ресурс]. - Режим доступа: https://material.io/design (дата обращения: 15.01.2025).

3. Android Developers. Room Persistence Library [Электронный ресурс]. - Режим доступа: https://developer.android.com/topic/libraries/architecture/room (дата обращения: 15.01.2025).

4. Android Developers. Navigation Component [Электронный ресурс]. - Режим доступа: https://developer.android.com/guide/navigation (дата обращения: 15.01.2025).

5. Блох, Дж. Java. Эффективное программирование / Дж. Блох. - 3-е изд. - М.: Вильямс, 2018. - 464 с.

6. Гилберт, Б. Android. Программирование для профессионалов / Б. Гилберт, Б. Харди. - 3-е изд. - СПб.: Питер, 2019. - 688 с.

7. Хорстманн, К. Java. Библиотека профессионала. Том 1. Основы / К. Хорстманн. - 11-е изд. - М.: Вильямс, 2019. - 864 с.

8. Oracle. Java Platform, Standard Edition Documentation [Электронный ресурс]. - Режим доступа: https://docs.oracle.com/en/java/javase/ (дата обращения: 15.01.2025).

ПРИЛОЖЕНИЯ

ПРИЛОЖЕНИЕ А
Код манифеста приложения (AndroidManifest.xml)

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Разрешения -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:name=".CoffeeShopApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Coffeeshop">
        <activity
            android:name=".activities.LoginActivity"
            android:exported="true"
            android:theme="@style/Theme.Coffeeshop">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        
        <activity
            android:name=".activities.MainActivity"
            android:exported="false"
            android:theme="@style/Theme.Coffeeshop" />
    </application>

</manifest>

ПРИЛОЖЕНИЕ Б
XML-разметка главной активности (activity_main.xml)

<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".activities.MainActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/Theme.Coffeeshop.AppBarOverlay">

        <androidx.appcompat.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
            app:popupTheme="@style/Theme.Coffeeshop.PopupOverlay" />

    </com.google.android.material.appbar.AppBarLayout>

    <include layout="@layout/content_main" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        app:menu="@menu/bottom_navigation" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

ПРИЛОЖЕНИЕ В
Код основных Java-классов

В.1 Класс модели пользователя (User.java)

package com.example.coffeeshop.model;

import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

@Entity(tableName = "users")
public class User {
    @PrimaryKey(autoGenerate = true)
    private int id;
    
    private String username;
    private String password;
    private String role;
    private String email;
    
    public User() {}
    
    @Ignore
    public User(String username, String password, String role, String email) {
        this.username = username;
        this.password = password;
        this.role = role;
        this.email = email;
    }
    
    // Геттеры и сеттеры
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public boolean isAdmin() { return "admin".equals(role); }
}

В.2 Класс модели товара (CoffeeItem.java)

package com.example.coffeeshop.model;

import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;
import java.io.Serializable;

@Entity(tableName = "coffee_items")
public class CoffeeItem implements Serializable {
    @PrimaryKey(autoGenerate = true)
    private int id;
    
    private String name;
    private String description;
    private double price;
    private String imagePath;
    private String category;
    private boolean isAvailable;
    
    public CoffeeItem() {}
    
    @Ignore
    public CoffeeItem(String name, String description, double price, String imagePath, String category) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.imagePath = imagePath;
        this.category = category;
        this.isAvailable = true;
    }
    
    // Геттеры и сеттеры
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
    
    public String getImagePath() { return imagePath; }
    public void setImagePath(String imagePath) { this.imagePath = imagePath; }
    
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
    
    public boolean isAvailable() { return isAvailable; }
    public void setAvailable(boolean available) { isAvailable = available; }
}

В.3 Класс базы данных (CoffeeShopDatabase.java)

package com.example.coffeeshop.data;

import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import android.content.Context;
import com.example.coffeeshop.model.User;
import com.example.coffeeshop.model.CoffeeItem;

@Database(
    entities = {User.class, CoffeeItem.class},
    version = 1,
    exportSchema = false
)
public abstract class CoffeeShopDatabase extends RoomDatabase {
    
    public abstract UserDao userDao();
    public abstract CoffeeDao coffeeDao();
    
    private static volatile CoffeeShopDatabase INSTANCE;
    
    public static CoffeeShopDatabase getDatabase(final Context context) {
        if (INSTANCE == null) {
            synchronized (CoffeeShopDatabase.class) {
                if (INSTANCE == null) {
                    INSTANCE = Room.databaseBuilder(
                        context.getApplicationContext(),
                        CoffeeShopDatabase.class,
                        "coffeeshop_database"
                    ).build();
                }
            }
        }
        return INSTANCE;
    }
}

В.4 Класс менеджера файлов (FileManager.java)

package com.example.coffeeshop.utils;

import android.content.Context;
import com.example.coffeeshop.model.User;
import com.example.coffeeshop.model.CoffeeItem;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class FileManager {
    private Context context;
    
    public FileManager(Context context) {
        this.context = context;
    }
    
    public void saveUsers(List<User> users) {
        try {
            FileOutputStream fos = context.openFileOutput("user_data.txt", Context.MODE_PRIVATE);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(users);
            oos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public List<User> loadUsers() {
        List<User> users = new ArrayList<>();
        try {
            FileInputStream fis = context.openFileInput("user_data.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            users = (List<User>) ois.readObject();
            ois.close();
        } catch (IOException | ClassNotFoundException e) {
            // Файл не существует или поврежден
        }
        return users;
    }
    
    public void saveCoffeeItems(List<CoffeeItem> coffeeItems) {
        try {
            FileOutputStream fos = context.openFileOutput("coffee_data.txt", Context.MODE_PRIVATE);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(coffeeItems);
            oos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public List<CoffeeItem> loadCoffeeItems() {
        List<CoffeeItem> coffeeItems = new ArrayList<>();
        try {
            FileInputStream fis = context.openFileInput("coffee_data.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            coffeeItems = (List<CoffeeItem>) ois.readObject();
            ois.close();
        } catch (IOException | ClassNotFoundException e) {
            // Файл не существует или поврежден
        }
        return coffeeItems;
    }
    
    public void deleteFile(String filename) {
        context.deleteFile(filename);
    }
}
